{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;kBAGwB,W;;AAHxB;;;;AACA;;;;AAEe,SAAS,WAAT,GAAyC;AAAA,QAApB,KAAoB,uEAAZ,EAAY;AAAA,QAAR,MAAQ;;AACpD,QAAI,QAAQ,OAAO,MAAP,CAAc,EAAd,EAAkB,MAAM,KAAxB,CAAZ;AACA,QAAI,QAAQ,OAAO,MAAP,CAAc,EAAd,EAAkB,MAAM,KAAxB,CAAZ;;AAEA,YAAQ,OAAO,IAAf;AACI,aAAK,kBAAO,QAAZ;AACI,gBAAI,KAAK,sBAAT;;AAEA,kBAAM,EAAN,IAAY;AACR,0BAAU,EADF;AAER,uBAAO;AACH,0BAAM,sBAAW,OADd;AAEH,4BAAQ;AAFL;AAFC,aAAZ;;AAQA,mBAAO,OAAO,MAAP,CAAc,EAAd,EAAkB,KAAlB,EAAyB,EAAC,OAAO,KAAR,EAAzB,CAAP;;AAEJ,aAAK,kBAAO,WAAZ;AACI,kBAAM,OAAO,EAAb,EAAiB,QAAjB,CAA0B,OAA1B,CAAkC,UAAC,EAAD,EAAQ;AACtC,uBAAO,MAAM,EAAN,CAAP;AACH,aAFD;AAGA,mBAAO,MAAM,OAAO,EAAb,CAAP;;AAEA,mBAAO,OAAO,MAAP,CAAc,EAAd,EAAkB,KAAlB,EAAyB,EAAC,OAAO,KAAR,EAAe,OAAO,KAAtB,EAAzB,CAAP;;AAEJ,aAAK,kBAAO,QAAZ;AACI,gBAAI,SAAS,sBAAb;;AAEA,kBAAM,MAAN,IAAgB;AACZ,wBAAQ,OAAO,MADH;AAEZ,sBAAM,OAAO,IAAP,CAAY,IAFN;AAGZ,6BAAa,OAAO,IAAP,CAAY;AAHb,aAAhB;AAKA,kBAAM,OAAO,MAAb,EAAqB,QAArB,CAA8B,IAA9B,CAAmC,MAAnC;;AAEA,mBAAO,OAAO,MAAP,CAAc,EAAd,EAAkB,KAAlB,EAAyB,EAAC,OAAO,KAAR,EAAe,OAAO,KAAtB,EAAzB,CAAP;;AAEJ,aAAK,kBAAO,SAAZ;AACI,kBAAM,OAAO,EAAb,IAAmB;AACf,wBAAQ,MAAM,OAAO,EAAb,EAAiB,MADV;AAEf,sBAAM,OAAO,IAAP,CAAY,IAFH;AAGf,6BAAa,OAAO,IAAP,CAAY;AAHV,aAAnB;;AAMA,mBAAO,OAAO,MAAP,CAAc,EAAd,EAAkB,KAAlB,EAAyB,EAAC,OAAO,KAAR,EAAzB,CAAP;;AAEJ,aAAK,kBAAO,WAAZ;AACI,gBAAI,YAAY,MAAM,MAAM,OAAO,EAAb,EAAiB,MAAvB,EAA+B,QAA/C;AACA,gBAAI,QAAQ,UAAU,OAAV,CAAkB,OAAO,EAAzB,CAAZ;;AAEA,sBAAU,MAAV,CAAiB,KAAjB,EAAwB,CAAxB;AACA,mBAAO,MAAM,OAAO,EAAb,CAAP;;AAEA,mBAAO,OAAO,MAAP,CAAc,EAAd,EAAkB,KAAlB,EAAyB,EAAC,OAAO,KAAR,EAAe,OAAO,KAAtB,EAAzB,CAAP;;AAEJ,aAAK,kBAAO,cAAZ;;AAEI,kBAAM,OAAO,MAAb,IAAuB;AACnB,0BAAU,MAAM,OAAO,MAAb,EAAqB,QADZ;AAEnB,uBAAO;AACH,0BAAM,OAAO,SADV;AAEH,4BAAQ,OAAO;AAFZ;AAFY,aAAvB;;AAQA,mBAAO,OAAO,MAAP,CAAc,EAAd,EAAkB,KAAlB,EAAyB,EAAC,OAAO,KAAR,EAAzB,CAAP;;AAEJ,aAAK,kBAAO,WAAZ;AACI,mBAAO,OAAO,MAAP,CAAc,EAAd,EAAkB,KAAlB,EAAyB,EAAC,MAAM,OAAO,IAAd,EAAzB,CAAP;;AAEJ;AACI,mBAAO,KAAP;AApER;AAsEH;;;;;;;;kCA1EuB,W","file":"index-compiled.js","sourcesContent":["import newId from '../utils/newid'\nimport { ACTION, LIST_STATE } from '../constants/constants'\n\nexport default function rootReducer(state = {}, action) {\n    let lists = Object.assign({}, state.lists);\n    let tasks = Object.assign({}, state.tasks);\n\n    switch (action.type) {\n        case ACTION.ADD_LIST:\n            let id = newId();\n\n            lists[id] = {\n                tasksIds: [],\n                state: {\n                    type: LIST_STATE.DEFAULT,\n                    taskId: null\n                }\n            };\n\n            return Object.assign({}, state, {lists: lists});\n\n        case ACTION.DELETE_LIST:\n            lists[action.id].tasksIds.forEach((id) => {\n                delete tasks[id];\n            });\n            delete lists[action.id];\n\n            return Object.assign({}, state, {lists: lists, tasks: tasks});\n\n        case ACTION.ADD_TASK:\n            let taskId = newId();\n\n            tasks[taskId] = {\n                listId: action.listId,\n                text: action.task.text,\n                isImportant: action.task.isImportant\n            };\n            lists[action.listId].tasksIds.push(taskId);\n\n            return Object.assign({}, state, {lists: lists, tasks: tasks});\n\n        case ACTION.EDIT_TASK:\n            tasks[action.id] = {\n                listId: tasks[action.id].listId,\n                text: action.task.text,\n                isImportant: action.task.isImportant\n            };\n\n            return Object.assign({}, state, {tasks: tasks});\n\n        case ACTION.DELETE_TASK:\n            let listTasks = lists[tasks[action.id].listId].tasksIds;\n            let index = listTasks.indexOf(action.id);\n\n            listTasks.splice(index, 1);\n            delete tasks[action.id];\n\n            return Object.assign({}, state, {lists: lists, tasks: tasks});\n\n        case ACTION.SET_LIST_STATE:\n\n            lists[action.listId] = {\n                tasksIds: lists[action.listId].tasksIds,\n                state: {\n                    type: action.stateType,\n                    taskId: action.taskId\n                }\n            };\n\n            return Object.assign({}, state, {lists: lists});\n\n        case ACTION.CHANGE_LANG:\n            return Object.assign({}, state, {lang: action.lang});\n\n        default:\n            return state\n    }\n}\n"]}