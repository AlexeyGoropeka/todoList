{"version":3,"sources":["TodoList.js"],"names":[],"mappings":"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","file":"TodoList-compiled.js","sourcesContent":["import React, {Component, PropTypes } from 'react'\nimport Task from '../components/Task'\nimport * as actionCreators from '../actions'\nimport { connect } from 'react-redux'\nimport Button from '../components/Button'\nimport EditTask from '../components/EditTask'\nimport { LIST_STATE } from '../constants/constants'\n\n\nclass TodoList extends Component {\n\n    render() {\n        let params = this.props;\n        let list = params.list;\n        let lang = this.context.lang;\n\n        let deleteListBtn = (\n            <li className=\"topListButton\">\n                <Button label={lang['LBL_DELETE_LIST']} onClick={() => { params.onDeleteList(params.id) }} />\n            </li>\n        );\n\n        let addTaskBtn = (\n            <li className=\"bottomListButton\">\n                <Button label={lang['LBL_ADD_NEW_TASK']} onClick={() => params.onCreateTask(params.id)} />\n            </li>\n        );\n\n        if (list.state.type !== LIST_STATE.DEFAULT) {\n            return (\n                <div className=\"todoList\">\n                    <EditTask\n                        listState={list.state}\n                        onTaskCreated={(text) => { params.onTaskCreated(params.id, text) }}\n                        onTaskEdited={(taskId, text) => params.onTaskEdited(params.id, taskId, text)}\n                        onCancel={() => params.onCancel(params.id)}\n                        tasks={params.tasks}\n                    />\n                </div>\n            )\n        } else if (list.tasksIds.length === 0) {\n            return (\n                <div className=\"todoList\">\n                    <ul>\n                        {deleteListBtn}\n                        <span className=\"noLists\">{lang['LBL_NO_TASKS']}</span>\n                        {addTaskBtn}\n                    </ul>\n                </div>\n            )\n        }\n\n        let tasks = [];\n        let reactTasks = [];\n\n        list.tasksIds.forEach(id => {\n            let task = params.tasks[id];\n            task.id = id;\n            tasks.push(task);\n        });\n\n        tasks.sort((a, b) => {\n            if (a.isImportant === b.isImportant) {\n                return 0;\n            }\n\n            if (a.isImportant && !b.isImportant) {\n                return -1;\n            }\n\n            if (!a.isImportant && b.isImportant) {\n                return 1;\n            }\n        });\n\n        tasks.forEach(task => {\n            reactTasks.push(\n                <Task\n                    text={task.text}\n                    onDeleteTask={() => {params.onDeleteTask(task.id)}}\n                    onEditTask={(taskId) => params.onEditTask(params.id, taskId)}\n                    id={task.id}\n                    className={task.isImportant ? 'isImportant' : ''}\n                    key={task.id}\n                />\n            );\n        });\n\n        return (\n            <div className=\"todoList\">\n                <ul>\n                    {deleteListBtn}\n                    {reactTasks}\n                    {addTaskBtn}\n                </ul>\n            </div>\n        )\n    }\n}\n\nTodoList.propTypes = {\n    tasks: PropTypes.object,\n    list: PropTypes.object,\n    id: PropTypes.string.isRequired,\n    onCreateTask: PropTypes.func,\n    onTaskCreated: PropTypes.func,\n    onEditTask: PropTypes.func,\n    onTaskEdited: PropTypes.func,\n    onCancel: PropTypes.func\n};\n\nTodoList.contextTypes = {\n    lang: PropTypes.object.isRequired\n};\n\nlet mapStateToProps = (state, ownProps) => {\n    return {\n        tasks: state.tasks,\n        list: ownProps.list,\n        id: ownProps.id\n    }\n};\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        onDeleteList: (id) => {\n            dispatch(actionCreators.deleteList(id))\n        },\n        onDeleteTask: (listId, taskId) => {\n            dispatch(actionCreators.deleteTask(listId, taskId))\n        },\n        onCreateTask: (listId) => {\n            dispatch(actionCreators.setListState(listId, LIST_STATE.TASK_CREATE));\n        },\n        onTaskCreated: (listId, taskObj) => {\n            dispatch(actionCreators.setListState(listId, LIST_STATE.DEFAULT));\n            dispatch(actionCreators.addTask(listId, taskObj));\n        },\n        onEditTask: (listId, taskId) => {\n            dispatch(actionCreators.setListState(listId, LIST_STATE.TASK_EDIT, taskId));\n        },\n        onTaskEdited: (listId, taskId, taskObj) => {\n            dispatch(actionCreators.setListState(listId, LIST_STATE.DEFAULT));\n            dispatch(actionCreators.editTask(taskId, taskObj));\n        },\n        onCancel: (listId) => {\n            dispatch(actionCreators.setListState(listId, LIST_STATE.DEFAULT));\n        }\n    }\n\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoList);\n"]}