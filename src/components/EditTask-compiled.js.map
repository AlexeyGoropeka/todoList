{"version":3,"sources":["EditTask.js"],"names":[],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;IAEM,Q;;;;;;;;;;;iCACO;AACL,gBAAI,SAAS,KAAK,KAAlB;AACA,gBAAI,OAAO,EAAX;AACA,gBAAI,UAAU,KAAd;AACA,gBAAI,OAAO,OAAO,KAAP,CAAa,OAAO,SAAP,CAAiB,MAA9B,CAAX;AACA,gBAAI,iBAAJ;AACA,gBAAI,OAAO,KAAK,OAAL,CAAa,IAAxB;;AAEA,oBAAQ,OAAO,SAAP,CAAiB,IAAzB;AACI,qBAAK,sBAAW,WAAhB;AACI,+BAAW,OAAO,aAAlB;AACA;AACJ,qBAAK,sBAAW,SAAhB;AACI,+BAAW,kBAAC,IAAD,EAAU;AACjB,+BAAO,YAAP,CAAoB,OAAO,SAAP,CAAiB,MAArC,EAA6C,IAA7C;AACH,qBAFD;AAGA,2BAAO,KAAK,IAAZ;AACA,8BAAU,KAAK,WAAf;AACA;AAVR;;AAaA,mBACI;AAAA;AAAA,kBAAK,WAAU,OAAf;AACI;AAAA;AAAA,sBAAK,WAAU,YAAf;AACI,gEAAU,IAAG,WAAb,EAAyB,cAAc,IAAvC,GADJ;AAEI;AAAA;AAAA;AACI,iEAAO,MAAK,UAAZ,EAAuB,gBAAgB,OAAvC,GADJ;AAEI;AAAA;AAAA;AAAQ,iCAAK,kBAAL;AAAR;AAFJ,qBAFJ;AAOI,sEAAQ,OAAO,OAAO,SAAP,CAAiB,IAAjB,KAA0B,sBAAW,WAArC,GAAmD,KAAK,SAAL,CAAnD,GAAqE,KAAK,UAAL,CAApF;AACQ,iCAAS,iBAAC,CAAD,EAAO;AACZ,gCAAI,OAAO,EAAE,MAAF,CAAS,UAAT,CAAoB,oBAApB,CAAyC,UAAzC,EAAqD,CAArD,EAAwD,KAAxD,CAA8D,IAA9D,EAAX;AACA,gCAAI,UAAU,EAAE,MAAF,CAAS,UAAT,CAAoB,oBAApB,CAAyC,OAAzC,EAAkD,CAAlD,EAAqD,OAAnE;;AAEA,gCAAI,SAAS,EAAb,EAAiB;AACb,yCAAS;AACL,0CAAM,IADD;AAEL,iDAAa;AAFR,iCAAT;AAIH;AACJ;AAXT,sBAPJ;AAoBI,sEAAQ,OAAO,KAAK,YAAL,CAAf,EAAmC,SAAS,OAAO,QAAnD;AApBJ;AADJ,aADJ;AA2BH;;;;;;AAGL,SAAS,SAAT,GAAqB;AACjB,eAAW,iBAAU,MADJ;AAEjB,mBAAe,iBAAU,IAFR;AAGjB,kBAAc,iBAAU,IAHP;AAIjB,cAAU,iBAAU,IAJH;AAKjB,WAAO,iBAAU;AALA,CAArB;;AAQA,SAAS,YAAT,GAAwB;AACpB,UAAM,iBAAU,MAAV,CAAiB;AADH,CAAxB;;eAIe,Q;;;;;;;;;kCAhET,Q","file":"EditTask-compiled.js","sourcesContent":["import React, { Component, PropTypes } from 'react'\nimport Button from '../components/Button'\nimport { LIST_STATE } from '../constants/constants'\n\nclass EditTask extends Component {\n    render() {\n        let params = this.props;\n        let text = '';\n        let checked = false;\n        let task = params.tasks[params.listState.taskId];\n        let callback;\n        let lang = this.context.lang;\n\n        switch (params.listState.type) {\n            case LIST_STATE.TASK_CREATE:\n                callback = params.onTaskCreated;\n                break;\n            case LIST_STATE.TASK_EDIT:\n                callback = (text) => {\n                    params.onTaskEdited(params.listState.taskId, text);\n                };\n                text = task.text;\n                checked = task.isImportant;\n                break;\n        }\n\n        return (\n            <div className=\"popup\">\n                <div className=\"popWrapper\">\n                    <textarea id=\"popup_txt\" defaultValue={text} />\n                    <div>\n                        <input type=\"checkbox\" defaultChecked={checked} />\n                        <label>{lang['LBL_IS_IMPORTANT']}</label>\n                    </div>\n\n                    <Button label={params.listState.type === LIST_STATE.TASK_CREATE ? lang['LBL_ADD'] : lang['LBL_EDIT']}\n                            onClick={(e) => {\n                                let text = e.target.parentNode.getElementsByTagName('textarea')[0].value.trim();\n                                let checked = e.target.parentNode.getElementsByTagName('input')[0].checked;\n\n                                if (text !== '') {\n                                    callback({\n                                        text: text,\n                                        isImportant: checked\n                                    });\n                                }\n                            }}\n                    />\n                    <Button label={lang['LBL_CANCEL']} onClick={params.onCancel} />\n                </div>\n\n            </div>\n        )\n    }\n}\n\nEditTask.propTypes = {\n    listState: PropTypes.object,\n    onTaskCreated: PropTypes.func,\n    onTaskEdited: PropTypes.func,\n    onCancel: PropTypes.func,\n    tasks: PropTypes.object\n};\n\nEditTask.contextTypes = {\n    lang: PropTypes.object.isRequired\n};\n\nexport default EditTask\n\n"]}